import argparse
import os
from datetime import datetime
from ngram_model import NGramModel

def main():
    parser = argparse.ArgumentParser(description='Generate text using trained 5-gram model')
    parser.add_argument('--model', type=str, default='models/5gram_extended.pkl',
                       help='Path to trained model')
    parser.add_argument('--words', type=int, default=200,
                       help='Number of words to generate (default: 200)')
    parser.add_argument('--samples', type=int, default=3,
                       help='Number of samples to generate (default: 3)')
    parser.add_argument('--seed', type=str, default=None,
                       help='Seed text to start generation')
    parser.add_argument('--save', action='store_true',
                       help='Save generated samples to files')

    args = parser.parse_args()

    print("=" * 70)
    print("5-Gram Text Generation")
    print("=" * 70)

    print(f"\nLoading model from: {args.model}")
    model = NGramModel.load(args.model)

    stats = model.get_ngram_stats()
    print(f"\nModel Info:")
    print(f"  N-gram size: {stats['n']}")
    print(f"  Vocabulary size: {stats['vocab_size']}")
    print(f"  Unique contexts: {stats['unique_contexts']}")

    print("\n" + "=" * 70)
    print(f"Generating {args.samples} samples of ~{args.words} words each")
    print("=" * 70)

    samples = []
    for i in range(args.samples):
        print(f"\n--- Sample {i+1} ---")

        if args.seed:
            generated_text = model.generate(max_words=args.words, seed=args.seed)
        else:
            generated_text = model.generate(max_words=args.words)

        word_count = len(generated_text.split())
        print(f"[{word_count} words]\n")
        print(generated_text)

        samples.append(generated_text)

        if args.save:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"samples/sample_{timestamp}_{i+1}.txt"
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"Generated by 5-gram model\n")
                f.write(f"Timestamp: {timestamp}\n")
                f.write(f"Word count: {word_count}\n")
                f.write(f"Model: {args.model}\n")
                f.write(f"\n{'=' * 70}\n\n")
                f.write(generated_text)
            print(f"\nSaved to: {filename}")

    print("\n" + "=" * 70)
    print("Generation Complete!")
    print("=" * 70)

if __name__ == "__main__":
    main()
